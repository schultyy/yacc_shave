#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer'

module YaccShave
  class Parser < Racc::Parser

module_eval(<<'...end yacc_shave.y/module_eval...', 'yacc_shave.y', 52)

def filename
  @filename
end

alias_method :parse_string, :scan_str

def pre_exe
  []
end

def on_error(t, val, vstack)
  raise ParseError, sprintf("\nparse error on value %s (%s) #{@filename}:#{@line}",
      val.inspect, token_to_str(t) || '?')
end

...end yacc_shave.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     4,     4,     5,     5,     5,     4,    11,    13,     5,
    14,    15,    16,    15,    15 ]

racc_action_check = [
     0,    12,    14,     0,    12,    14,    15,     1,     3,    15,
     5,    10,    11,    17,    18 ]

racc_action_pointer = [
    -2,     7,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,
     8,    12,    -1,   nil,     0,     4,   nil,    10,    11,   nil ]

racc_action_default = [
    -2,   -17,    -1,    -3,    -4,    -5,    -9,   -10,   -11,   -12,
   -14,   -17,   -17,   -16,   -17,   -17,    20,   -15,    -6,   -13 ]

racc_goto_table = [
    10,     1,     2,     3,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,   nil,    18,    19 ]

racc_goto_check = [
     7,     1,     2,     3,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     7,   nil,     7,     7 ]

racc_goto_pointer = [
   nil,     1,     2,     3,   nil,   nil,   nil,     0,   nil,   nil,
     1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     6,     8,     9,   nil,   nil,     7,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  0, 14, :_reduce_2,
  1, 14, :_reduce_3,
  1, 16, :_reduce_4,
  1, 17, :_reduce_5,
  3, 18, :_reduce_6,
  1, 20, :_reduce_7,
  3, 20, :_reduce_8,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 21, :_reduce_13,
  1, 15, :_reduce_14,
  3, 15, :_reduce_15,
  1, 22, :_reduce_none ]

racc_reduce_n = 17

racc_shift_n = 20

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :ADD => 3,
  :NEWLINE => 4,
  :IDENTIFIER => 5,
  :ASSIGN => 6,
  :LCBRA => 7,
  :RCBRA => 8,
  :COMMA => 9,
  :DOT => 10,
  :SUBTRACT => 11 }

racc_nt_base = 12

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "ADD",
  "NEWLINE",
  "IDENTIFIER",
  "ASSIGN",
  "LCBRA",
  "RCBRA",
  "COMMA",
  "DOT",
  "SUBTRACT",
  "$start",
  "root",
  "program",
  "expressions",
  "number",
  "variable_access",
  "variable_assignment",
  "expression",
  "elements",
  "binary_operation",
  "terminator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'yacc_shave.y', 19)
  def _reduce_2(val, _values)
     AST::Program.new( filename, lineno, [])
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 20)
  def _reduce_3(val, _values)
     AST::Program.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 22)
  def _reduce_4(val, _values)
     AST::IntegerNode.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 24)
  def _reduce_5(val, _values)
     AST::VariableAccessNode.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 26)
  def _reduce_6(val, _values)
    AST::VariableAssignmentNode.new( filename, lineno, val[0], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 28)
  def _reduce_7(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 29)
  def _reduce_8(val, _values)
     val[0] << val[2] 
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'yacc_shave.y', 37)
  def _reduce_13(val, _values)
    AST::AddNode.new( filename, lineno, val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 39)
  def _reduce_14(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'yacc_shave.y', 40)
  def _reduce_15(val, _values)
     val[0] << val[2] 
  end
.,.,

# reduce 16 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module YaccShave


